'use strict';

var slugify = require('http-slug');
//module.exports = function(tollan) {
	//var React = tollan.React;
	//var Router = tollan.Router;

	var tagStore = tollan.getStore('blog/tagStore');
	var form = require('forrrm')(React);
	var TextInput = form.TextInput;
	var Toast = form.Toast;

	var AddTag = React.createClass({
		propTypes: {
			visible: React.PropTypes.bool,
			onTagCreated: React.PropTypes.func,
			onCancel: React.PropTypes.func
		},
		getInitialState: function() {
			return {
				name: '',
				valid: false,
				processing: false,
				errors: {}
			};
		},
		onChange: function(newName) {
			var data = {name: newName};
			var constraints = {
				name: {
					presence: true,
					length: {
						maximum: 50,
					}
				}
			};
			var errors = {};
			if (data.name.length < 1) {
				errors.name = ['Name is required'];
			} else if (data.name.length > 50) {
				errors.name = ['Name must be less than 50 characters'];
			} else  if (!errors.name) {
				tagStore.getAll().forEach(tag => {
					if (tag.slug === slugify(data.name)) {
						errors.slug = ['Slug must be unique'];
					}
				});
			}
			this.setState({
				valid: Object.keys(errors).length ? false : true,
				errors: errors,
				name: newName
			});
		},
		onFormSubmit: function(e) {
			e.preventDefault();
			this.setState({processing: true});
			tollan.postAction('blog/addTag', {slug: slugify(this.state.name), name: this.state.name})
				.then(response => {
					if (response.statusCode === 200) {
						this.setState({processing: false, name: '', valid: false});
						tagStore.load(); // Reload the entire tag store, easier than updating it
						if (this.props.onTagCreated) {
							this.props.onTagCreated();
						}
					} else {
						this.setState({processing: false, errorText: 'Error: ' + response.statusCode + ' ' + response.body.errorText});
					}
				}).catch(err => {
					this.setState({processing: false, errorText: 'Error (code: ' + err.message + ')'});
				});
		},
		componentDidMount: function() {
			this.refs.nameInput.focus();
		},
		render: function() {
			var slug = slugify(this.state.name);
			var submitValue = <span>Create Tag</span>;

			if (this.state.processing) {
				submitValue = (
					<span>
						<i className="fa fa-circle-o-notch fa-spin"></i>&nbsp;Working...
					</span>
				);
			}

			var errorComponent = null;
			if (this.state.errorText) {
				errorComponent = <div className="Alert-error">{this.state.errorText}</div>;
			}

			return (
				<div className="ModalDialog">
					<div className="inner">
						<h2>Add a new tag</h2>
						<form action="" method="POST" onSubmit={this.onFormSubmit} onChange={this.onFormChange}>
							{errorComponent}
							<TextInput label="Name" name="name" placeholder="Enter a name less than 50 characters" value={this.state.name} onChange={this.onChange} errorText={this.state.errors.name} ref="nameInput" />
							<TextInput label="Slug" name="slug" placeholder="[autogenerated]" readOnly={true} value={slug} errorText={this.state.errors.slug} />
							<div className="buttons">
								<button type="submit" className="Button-blue" disabled={!this.state.valid || this.state.processing}>
									{submitValue}
								</button>
								<button className="Button-light" onClick={this.onCancel}>Cancel</button>
							</div>
						</form>
					</div>
				</div>
			);
		},
		onCancel: function(e) {
			e.preventDefault();
			this.setState({name: ''});
			if (this.props.onCancel) {
				this.props.onCancel();
			}
		}
	});

	var TagRow = require('./TagRow');
	var ReactTransitionGroup = React.addons.TransitionGroup;

	module.exports = React.createClass({
		getInitialState: function getInitialState() {
			return {
				tags: [],
				addTagVisible: false,
				toastVisible: false
			}
		},
		componentDidMount: function componentDidMount() {
			tagStore.on('change', this.onStoreChange);
			tagStore.load();
		},
		componentWillUnmount: function componentWillUnmount() {
			tagStore.removeListener('change', this.onStoreChange);
		},
		onStoreChange: function() {
			this.setState({tags: tagStore.getAll()});
		},
		render: function() {
			var tags = [];
			this.state.tags.forEach(tag => {
				tags.push(
					<TagRow key={tag.slug} tag={tag} onTagDeleted={this.onTagDeleted} onTagDeleteFail={this.onTagDeleteFail} onTagSave={this.onTagSave} onTagSaveFail={this.onTagSaveFail} />
				);
			});
			var addTag = null;
			if (this.state.addTagVisible) {
				addTag = <AddTag onTagCreated={this.onTagCreated} onCancel={this.onTagCreateCancel} />;
			}

			return (
				<div className="AdminContent">

					<section className="Panel">

						<div className="Toolbar">
							<h1>Blog Tags</h1>
							<div className="Toolbar-right">
								<button className="Button-red" onClick={this.onCreateTagClick}><i className="fa fa-plus Tooltip"></i> Create Tag</button>
							</div>
						</div>

						<div className="panelContent">
							<table className="Table">
								<thead>
									<tr><th>Slug</th><th>Name</th><th>Displayed</th><th>Actions</th></tr>
								</thead>
								<ReactTransitionGroup component="tbody">
								{tags}
								</ReactTransitionGroup>
							</table>
						</div>

						{addTag}
					</section>
					<Toast visible={this.state.toastVisible} text={this.state.toastText} toastClass={this.state.toastClass} />
				</div>
			);
		},
		onCreateTagClick: function onCreateTagClick() {
			this.setState({addTagVisible: true});
		},
		onTagCreated: function onTagCreated() {
			this.setState({addTagVisible: false, toastVisible: true, toastClass: '', toastText: 'Tag created successfully'});
		},
		onTagCreateCancel: function onTagCreateCancel() {
			this.setState({addTagVisible: false});
		},
		onTagDeleted: function() {
			this.setState({toastVisible: true, toastClass: '', toastText: 'Tag deleted successfully'});
			tagStore.load();
		},
		onTagDeleteFail: function(errText) {
			this.setState({toastVisible: true, toastClass: 'error', toastText: 'Error deleting tag: ' + errText});
		},
		onTagSave: function() {
			this.setState({toastVisible: true, toastClass: '', toastText: 'Tag saved successfully'});
			tagStore.load();
		},
		onTagSaveFail: function(errText) {
			this.setState({toastVisible: true, toastClass: 'error', toastText: 'Error saving tag: ' + errText});
		}
	});
//};
